const multer = require("multer");
const path = require("path");
const fs = require("fs");

// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏¢‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
const directories = {
  profileImage: path.join(__dirname, "../uploads/profile_images"),
  introVideo: path.join(__dirname, "../uploads/intro_videos"),
  paymentProof: path.join(__dirname, "../uploads/payment_proofs"),
};

// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
Object.values(directories).forEach((dir) => {
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
    console.log(`üìÇ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå ${dir} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`);
  }
});

// ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Storage ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (Profile & Video)
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    if (file.fieldname === "profileImage") {
      cb(null, directories.profileImage);
    } else if (file.fieldname === "introVideo") {
      cb(null, directories.introVideo);
    } else {
      cb(new Error("‚ùå ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á"));
    }
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + "-" + Math.round(Math.random() * 1e9);
    cb(null, uniqueSuffix + path.extname(file.originalname));
  },
});

// ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
const fileFilter = (req, file, cb) => {
  const imageTypes = ["image/jpeg", "image/jpg", "image/png", "image/webp"];
  const videoTypes = ["video/mp4", "video/quicktime", "video/x-msvideo"];

  if (file.fieldname === "profileImage" && !imageTypes.includes(file.mimetype)) {
    return cb(new Error("‚ùå ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå JPG, JPEG, PNG, WEBP ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!"));
  }
  if (file.fieldname === "introVideo" && !videoTypes.includes(file.mimetype)) {
    return cb(new Error("‚ùå ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå MP4, MOV, AVI ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!"));
  }

  cb(null, true);
};

// ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Multer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Profile & Video
const upload = multer({
  storage,
  fileFilter,
  limits: {
    fileSize: 1024 * 1024 * 1024, // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå 200MB (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠)
  },
});

// ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î Storage ‡πÅ‡∏•‡∏∞ File Filter ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Payment Proofs
const storagePaymentProof = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, directories.paymentProof);
  },
  filename: (req, file, cb) => {
    const uniqueSuffix = Date.now() + "-" + Math.round(Math.random() * 1e9);
    cb(null, uniqueSuffix + path.extname(file.originalname));
  },
});

const fileFilterPaymentProof = (req, file, cb) => {
  const allowedTypes = ["image/jpeg", "image/png", "image/jpg", "image/webp"];
  if (!allowedTypes.includes(file.mimetype)) {
    return cb(new Error("‚ùå ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÑ‡∏ü‡∏•‡πå JPG, JPEG, PNG, WEBP ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô!"));
  }
  cb(null, true);
};

// ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Multer ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Payment Proofs
const uploadPaymentProof = multer({
  storage: storagePaymentProof,
  fileFilter: fileFilterPaymentProof,
  limits: { fileSize: 5 * 1024 * 1024 }, // ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå 5MB
});

// ‚úÖ Export Middleware
module.exports = { upload, uploadPaymentProof };
