const fs = require("fs");
const TutorProfile = require("../models/TutorProfile");
const User = require("../models/User");

exports.createProfile = async (req, res) => {
  try {
    console.log("üîç Request Body:", req.body);
    console.log("üìÇ Uploaded Files:", req.files);

    const {
      fullName,
      phone,
      email,
      introduction,
      location,
      teachingMethods,
      ageGroups,
      subjects,
      courses,
      schedule,
      price,
    } = req.body;

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ `userId` ‡∏°‡∏≤‡∏à‡∏≤‡∏Å JWT ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    console.log("üîê Authenticated User:", req.user);
    
    const userId = req.user?.userId; // ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤ `authenticateUser` Middleware ‡πÉ‡∏ä‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    if (!userId) {
      return res.status(401).json({ success: false, message: "‚ùå Unauthorized: ‡πÑ‡∏°‡πà‡∏û‡∏ö User ID" });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Email ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return res.status(400).json({ success: false, message: "‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö Email ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á JSON String ‡πÄ‡∏õ‡πá‡∏ô Object
    const parsedSubjects = JSON.parse(subjects || "[]");
    const parsedCourses = JSON.parse(courses || "[]");
    const parsedSchedule = JSON.parse(schedule || "[]");
    const parsedTeachingMethods = JSON.parse(teachingMethods || "[]");
    const parsedAgeGroups = JSON.parse(ageGroups || "[]");

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î
    let profileImageUrl = req.files?.profileImage?.[0]?.filename || "";
    let introVideoUrl = req.files?.introVideo?.[0]?.filename || "";

    // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    const newProfile = await TutorProfile.create({
      userId, // üî• ‡∏ï‡πâ‡∏≠‡∏á‡πÉ‡∏™‡πà userId ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ú‡∏π‡∏Å‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      name: fullName,
      phone,
      email,
      introduction,
      location,
      profileImage: profileImageUrl,
      introVideo: introVideoUrl,
      teachingMethods: parsedTeachingMethods,
      ageGroups: parsedAgeGroups,
      subjects: parsedSubjects,
      courses: parsedCourses,
      schedule: parsedSchedule,
      price,
    });

    res.json({ success: true, message: "‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", data: newProfile });

  } catch (error) {
    console.error("‚ùå Error:", error);
    res.status(500).json({ success: false, message: error.message });
  }
};
