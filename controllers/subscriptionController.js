const Subscription = require("../models/Subscription");
const User = require("../models/User");

// ‚úÖ API: ‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡πÉ‡∏´‡∏°‡πà
exports.subscribePackage = async (req, res) => {
  try {
    const { packageType } = req.body;
    const userId = req.user.id;

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const validPackages = ["basic", "standard", "premium", "business"];
    if (!validPackages.includes(packageType)) {
      return res.status(400).json({ success: false, message: "‚ùå ‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏°‡∏µ Subscription ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    let subscription = await Subscription.findOne({ where: { userId } });

    if (subscription) {
      // üîÑ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏•‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‚Üí ‡∏ï‡πà‡∏≠‡∏≠‡∏≤‡∏¢‡∏∏
      if (subscription.status === "expired") {
        subscription.packageType = packageType;
        subscription.status = "pending"; // ‚úÖ ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
        subscription.expiresAt = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000);
        await subscription.save();
        return res.status(200).json({ success: true, subscription });
      } else {
        return res.status(400).json({ success: false, message: "‚ùå ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡πÅ‡∏û‡πá‡∏Å‡πÄ‡∏Å‡∏à‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß" });
      }
    }

    // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ Subscription ‚Üí ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà
    subscription = await Subscription.create({
      userId,
      packageType,
      status: "pending", // ‚úÖ ‡∏£‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
      expiresAt: new Date(Date.now() + 30 * 24 * 60 * 60 * 1000), // ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 30 ‡∏ß‡∏±‡∏ô
    });

    res.status(200).json({ success: true, subscription });
  } catch (error) {
    console.error("‚ùå Error in subscribePackage:", error);
    res.status(500).json({ success: false, message: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" });
  }
};

// ‚úÖ API: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Subscription ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
exports.getSubscriptionStatus = async (req, res) => {
  try {
    const userId = req.user.id;
    const subscription = await Subscription.findOne({ where: { userId } });

    if (!subscription) {
      return res.status(200).json({ hasSubscription: false });
    }

    // ‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
    const now = new Date();
    if (new Date(subscription.expiresAt) < now) {
      subscription.status = "expired";
      await subscription.save();
    }

    res.status(200).json({
      hasSubscription: true,
      packageType: subscription.packageType,
      status: subscription.status,
    });
  } catch (error) {
    console.error("‚ùå Error in getSubscriptionStatus:", error);
    res.status(500).json({ success: false, message: "‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå" });
  }
};
