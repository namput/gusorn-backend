const { Thread, Reply } = require("../models");
const User = require("../models/User");


// ‚úÖ ‡∏î‡∏∂‡∏á‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
exports.getAllThreads = async (req, res) => {
  try {
    const threads = await Thread.findAll({
      order: [["created_at", "DESC"]],
    });
    res.json(threads);
  } catch (error) {
    console.error("Error fetching threads:", error);
    res.status(500).json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡πÑ‡∏î‡πâ" });
  }
};


// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡πÉ‡∏´‡∏°‡πà (‡∏ï‡πâ‡∏≠‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô)
exports.createThread = async (req, res) => {
  try {
    const { title, content } = req.body;
    const user_id = req.user.userId;

    if (!title || !content) {
      return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö" });
    }

    const thread = await Thread.create({ user_id, title, content });
    res.status(201).json({ message: "‚úÖ ‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡πâ‡∏ß!", thread });
  } catch (error) {
    console.error("Error creating thread:", error);
    res.status(500).json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ‡πÑ‡∏î‡πâ" });
  }
};

// ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô (‡∏ï‡πâ‡∏≠‡∏á‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô)

exports.addReply = async (req, res) => {
    try {
      const { thread_id, content } = req.body;
      const user_id = req.user?.userId; // ‚úÖ ‡∏î‡∏∂‡∏á ID ‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏à‡∏≤‡∏Å Token
  console.log("üî• user_id:", user_id);
  
      if (!user_id) {
        return res.status(401).json({ message: "Unauthorized: ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö" });
      }
  
      if (!thread_id || !content.trim()) {
        return res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö" });
      }
  
      const reply = await Reply.create({ thread_id, user_id, content });
      res.status(201).json({ message: "‚úÖ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏ñ‡∏π‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß!", reply });
    } catch (error) {
      console.error("Error creating reply:", error);
      res.status(500).json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ" });
    }
  };
  exports.getThreadById = async (req, res) => {
    try {
      const thread = await Thread.findByPk(req.params.id, {
        include: [
          {
            model: Reply,
            as: "replies",
            include: [{ model: User, as: "user", attributes: ["id", "username"] }],
            separate: true, // ‚úÖ ‡πÉ‡∏ä‡πâ `separate: true` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ `order` ‡∏°‡∏µ‡∏ú‡∏•
            order: [["createdAt", "ASC"]], // ‚úÖ ‡πÅ‡∏Å‡πâ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ
          },
        ],
      });
  
      if (!thread) {
        return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏£‡∏∞‡∏ó‡∏π‡πâ" });
      }
  
      res.json(thread);
    } catch (error) {
      console.error("‚ùå Error fetching thread:", error);
      res.status(500).json({ message: "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ" });
    }
  };
  
  
  
  